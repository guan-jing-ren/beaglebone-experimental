#ifndef _CONTROL_MODULE_HPP_
#define _CONTROL_MODULE_HPP_

#include "offset_register.hpp"

namespace control_module {
enum class CONTROL_REVISION { RESERVED = -1, OFFSET = 0, RESET = 0 };
enum class CONTROL_HWINFO { RESERVED = -1, OFFSET = 4, RESET = 0 };
enum class CONTROL_SYSCONFIG { RESERVED = -1, OFFSET = 0X10, RESET = 0 };
enum class CONTROL_STATUS { RESERVED = -1, OFFSET = 0X40, RESET = 0 };
enum class CONTROL_EMIF_SDRAM_CONFIG {
  RESERVED = -1,
  OFFSET = 0X110,
  RESET = 0
};
enum class CORE_SLDO_CTRL { RESERVED = -1, OFFSET = 0X428, RESET = 0 };
enum class MPU_SLDO_CTRL { RESERVED = -1, OFFSET = 0X42C, RESET = 0 };
enum class CLK32KDIVRATIO_CTRL { RESERVED = -1, OFFSET = 0X444, RESET = 0 };
enum class BANDGAP_CTRL { RESERVED = -1, OFFSET = 0X448, RESET = 0 };
enum class BANDGAP_TRIM { RESERVED = -1, OFFSET = 0X44C, RESET = 0 };
enum class PLL_CLKINPULOW_CTRL { RESERVED = -1, OFFSET = 0X458, RESET = 0 };
enum class MOSC_CTRL { RESERVED = -1, OFFSET = 0X468, RESET = 0 };
enum class DEEPSLEEP_CTRL { RESERVED = -1, OFFSET = 0X470, RESET = 0 };
enum class DPLL_PWR_SW_STATUS { RESERVED = -1, OFFSET = 0X50C, RESET = 0 };
enum class DEVICE_ID { RESERVED = -1, OFFSET = 0X600, RESET = 0 };
enum class DEV_FEATURE { RESERVED = -1, OFFSET = 0X604, RESET = 0 };
enum class INIT_PRIORITY_0 { RESERVED = -1, OFFSET = 0X608, RESET = 0 };
enum class INIT_PRIORITY_1 { RESERVED = -1, OFFSET = 0X60C, RESET = 0 };
enum class TPTC_CFG { RESERVED = -1, OFFSET = 0X614, RESET = 0 };
enum class USB_CTRL0 { RESERVED = -1, OFFSET = 0X620, RESET = 0 };
enum class USB_STS0 { RESERVED = -1, OFFSET = 0X624, RESET = 0 };
enum class USB_CTRL1 { RESERVED = -1, OFFSET = 0X628, RESET = 0 };
enum class USB_STS1 { RESERVED = -1, OFFSET = 0X62C, RESET = 0 };
enum class MAC_ID0_LO { RESERVED = -1, OFFSET = 0X630, RESET = 0 };
enum class MAC_ID0_HI { RESERVED = -1, OFFSET = 0X634, RESET = 0 };
enum class MAC_ID1_LO { RESERVED = -1, OFFSET = 0X638, RESET = 0 };
enum class MAC_ID1_HI { RESERVED = -1, OFFSET = 0X63C, RESET = 0 };
enum class DCAN_RAMINIT { RESERVED = -1, OFFSET = 0X644, RESET = 0 };
enum class USB_WKUP_CTRL { RESERVED = -1, OFFSET = 0X648, RESET = 0 };
enum class GMII_SEL { RESERVED = -1, OFFSET = 0X650, RESET = 0 };
enum class PWMSS_CTRL { RESERVED = -1, OFFSET = 0X664, RESET = 0 };
enum class MREQPRIO_0 { RESERVED = -1, OFFSET = 0X670, RESET = 0 };
enum class MREQPRIO_1 { RESERVED = -1, OFFSET = 0X674, RESET = 0 };
enum class HW_EVENT_SEL_GRP1 { RESERVED = -1, OFFSET = 0X690, RESET = 0 };
enum class HW_EVENT_SEL_GRP2 { RESERVED = -1, OFFSET = 0X694, RESET = 0 };
enum class HW_EVENT_SEL_GRP3 { RESERVED = -1, OFFSET = 0X698, RESET = 0 };
enum class HW_EVENT_SEL_GRP4 { RESERVED = -1, OFFSET = 0X69C, RESET = 0 };
enum class SMRT_CTRL { RESERVED = -1, OFFSET = 0X6A0, RESET = 0 };
enum class MPUSS_HW_DEBUG_SEL { RESERVED = -1, OFFSET = 0X6A4, RESET = 0 };
enum class MPUSS_HW_DBG_INFO { RESERVED = -1, OFFSET = 0X6A8, RESET = 0 };
enum class VDD_MPU_OPP_050 { RESERVED = -1, OFFSET = 0X770, RESET = 0 };
enum class VDD_MPU_OPP_100 { RESERVED = -1, OFFSET = 0X774, RESET = 0 };
enum class VDD_MPU_OPP_120 { RESERVED = -1, OFFSET = 0X778, RESET = 0 };
enum class VDD_MPU_OPP_TURBO { RESERVED = -1, OFFSET = 0X77C, RESET = 0 };
enum class VDD_CORE_OPP_050 { RESERVED = -1, OFFSET = 0X7B8, RESET = 0 };
enum class VDD_CORE_OPP_100 { RESERVED = -1, OFFSET = 0X7BC, RESET = 0 };
enum class BB_SCALE { RESERVED = -1, OFFSET = 0X7D0, RESET = 0 };
enum class USB_VID_PID { RESERVED = -1, OFFSET = 0X7F4, RESET = 0 };
enum class EFUSE_SMA { RESERVED = -1, OFFSET = 0X7FC, RESET = 0 };
enum class CONF_GPMC_AD0 {
  CONF_GPMC_AD0_MMODE,
  CONF_GPMC_AD0_PUDEN,
  CONF_GPMC_AD0_PUTYPESEL,
  CONF_GPMC_AD0_RXACTIVE,
  CONF_GPMC_AD0_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X800,
  RESET = 0
};
enum class CONF_GPMC_AD1 {
  CONF_GPMC_AD1_MMODE,
  CONF_GPMC_AD1_PUDEN,
  CONF_GPMC_AD1_PUTYPESEL,
  CONF_GPMC_AD1_RXACTIVE,
  CONF_GPMC_AD1_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X804,
  RESET = 0
};
enum class CONF_GPMC_AD2 {
  CONF_GPMC_AD2_MMODE,
  CONF_GPMC_AD2_PUDEN,
  CONF_GPMC_AD2_PUTYPESEL,
  CONF_GPMC_AD2_RXACTIVE,
  CONF_GPMC_AD2_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X808,
  RESET = 0
};
enum class CONF_GPMC_AD3 {
  CONF_GPMC_AD3_MMODE,
  CONF_GPMC_AD3_PUDEN,
  CONF_GPMC_AD3_PUTYPESEL,
  CONF_GPMC_AD3_RXACTIVE,
  CONF_GPMC_AD3_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X80C,
  RESET = 0
};
enum class CONF_GPMC_AD4 {
  CONF_GPMC_AD4_MMODE,
  CONF_GPMC_AD4_PUDEN,
  CONF_GPMC_AD4_PUTYPESEL,
  CONF_GPMC_AD4_RXACTIVE,
  CONF_GPMC_AD4_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X810,
  RESET = 0
};
enum class CONF_GPMC_AD5 {
  CONF_GPMC_AD5_MMODE,
  CONF_GPMC_AD5_PUDEN,
  CONF_GPMC_AD5_PUTYPESEL,
  CONF_GPMC_AD5_RXACTIVE,
  CONF_GPMC_AD5_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X814,
  RESET = 0
};
enum class CONF_GPMC_AD6 {
  CONF_GPMC_AD6_MMODE,
  CONF_GPMC_AD6_PUDEN,
  CONF_GPMC_AD6_PUTYPESEL,
  CONF_GPMC_AD6_RXACTIVE,
  CONF_GPMC_AD6_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X818,
  RESET = 0
};
enum class CONF_GPMC_AD7 {
  CONF_GPMC_AD7_MMODE,
  CONF_GPMC_AD7_PUDEN,
  CONF_GPMC_AD7_PUTYPESEL,
  CONF_GPMC_AD7_RXACTIVE,
  CONF_GPMC_AD7_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X81C,
  RESET = 0
};
enum class CONF_GPMC_AD8 {
  CONF_GPMC_AD8_MMODE,
  CONF_GPMC_AD8_PUDEN,
  CONF_GPMC_AD8_PUTYPESEL,
  CONF_GPMC_AD8_RXACTIVE,
  CONF_GPMC_AD8_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X820,
  RESET = 0
};
enum class CONF_GPMC_AD9 {
  CONF_GPMC_AD9_MMODE,
  CONF_GPMC_AD9_PUDEN,
  CONF_GPMC_AD9_PUTYPESEL,
  CONF_GPMC_AD9_RXACTIVE,
  CONF_GPMC_AD9_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X824,
  RESET = 0
};
enum class CONF_GPMC_AD10 {
  CONF_GPMC_AD10_MMODE,
  CONF_GPMC_AD10_PUDEN,
  CONF_GPMC_AD10_PUTYPESEL,
  CONF_GPMC_AD10_RXACTIVE,
  CONF_GPMC_AD10_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X828,
  RESET = 0
};
enum class CONF_GPMC_AD11 {
  CONF_GPMC_AD11_MMODE,
  CONF_GPMC_AD11_PUDEN,
  CONF_GPMC_AD11_PUTYPESEL,
  CONF_GPMC_AD11_RXACTIVE,
  CONF_GPMC_AD11_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X82C,
  RESET = 0
};
enum class CONF_GPMC_AD12 {
  CONF_GPMC_AD12_MMODE,
  CONF_GPMC_AD12_PUDEN,
  CONF_GPMC_AD12_PUTYPESEL,
  CONF_GPMC_AD12_RXACTIVE,
  CONF_GPMC_AD12_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X830,
  RESET = 0
};
enum class CONF_GPMC_AD13 {
  CONF_GPMC_AD13_MMODE,
  CONF_GPMC_AD13_PUDEN,
  CONF_GPMC_AD13_PUTYPESEL,
  CONF_GPMC_AD13_RXACTIVE,
  CONF_GPMC_AD13_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X834,
  RESET = 0
};
enum class CONF_GPMC_AD14 {
  CONF_GPMC_AD14_MMODE,
  CONF_GPMC_AD14_PUDEN,
  CONF_GPMC_AD14_PUTYPESEL,
  CONF_GPMC_AD14_RXACTIVE,
  CONF_GPMC_AD14_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X838,
  RESET = 0
};
enum class CONF_GPMC_AD15 {
  CONF_GPMC_AD15_MMODE,
  CONF_GPMC_AD15_PUDEN,
  CONF_GPMC_AD15_PUTYPESEL,
  CONF_GPMC_AD15_RXACTIVE,
  CONF_GPMC_AD15_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X83C,
  RESET = 0
};
enum class CONF_GPMC_A0 {
  CONF_GPMC_A0_MMODE,
  CONF_GPMC_A0_PUDEN,
  CONF_GPMC_A0_PUTYPESEL,
  CONF_GPMC_A0_RXACTIVE,
  CONF_GPMC_A0_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X840,
  RESET = 0
};
enum class CONF_GPMC_A1 {
  CONF_GPMC_A1_MMODE,
  CONF_GPMC_A1_PUDEN,
  CONF_GPMC_A1_PUTYPESEL,
  CONF_GPMC_A1_RXACTIVE,
  CONF_GPMC_A1_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X844,
  RESET = 0
};
enum class CONF_GPMC_A2 {
  CONF_GPMC_A2_MMODE,
  CONF_GPMC_A2_PUDEN,
  CONF_GPMC_A2_PUTYPESEL,
  CONF_GPMC_A2_RXACTIVE,
  CONF_GPMC_A2_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X848,
  RESET = 0
};
enum class CONF_GPMC_A3 {
  CONF_GPMC_A3_MMODE,
  CONF_GPMC_A3_PUDEN,
  CONF_GPMC_A3_PUTYPESEL,
  CONF_GPMC_A3_RXACTIVE,
  CONF_GPMC_A3_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X84C,
  RESET = 0
};
enum class CONF_GPMC_A4 {
  CONF_GPMC_A4_MMODE,
  CONF_GPMC_A4_PUDEN,
  CONF_GPMC_A4_PUTYPESEL,
  CONF_GPMC_A4_RXACTIVE,
  CONF_GPMC_A4_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X850,
  RESET = 0
};
enum class CONF_GPMC_A5 {
  CONF_GPMC_A5_MMODE,
  CONF_GPMC_A5_PUDEN,
  CONF_GPMC_A5_PUTYPESEL,
  CONF_GPMC_A5_RXACTIVE,
  CONF_GPMC_A5_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X854,
  RESET = 0
};
enum class CONF_GPMC_A6 {
  CONF_GPMC_A6_MMODE,
  CONF_GPMC_A6_PUDEN,
  CONF_GPMC_A6_PUTYPESEL,
  CONF_GPMC_A6_RXACTIVE,
  CONF_GPMC_A6_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X858,
  RESET = 0
};
enum class CONF_GPMC_A7 {
  CONF_GPMC_A7_MMODE,
  CONF_GPMC_A7_PUDEN,
  CONF_GPMC_A7_PUTYPESEL,
  CONF_GPMC_A7_RXACTIVE,
  CONF_GPMC_A7_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X85C,
  RESET = 0
};
enum class CONF_GPMC_A8 {
  CONF_GPMC_A8_MMODE,
  CONF_GPMC_A8_PUDEN,
  CONF_GPMC_A8_PUTYPESEL,
  CONF_GPMC_A8_RXACTIVE,
  CONF_GPMC_A8_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X860,
  RESET = 0
};
enum class CONF_GPMC_A9 {
  CONF_GPMC_A9_MMODE,
  CONF_GPMC_A9_PUDEN,
  CONF_GPMC_A9_PUTYPESEL,
  CONF_GPMC_A9_RXACTIVE,
  CONF_GPMC_A9_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X864,
  RESET = 0
};
enum class CONF_GPMC_A10 {
  CONF_GPMC_A10_MMODE,
  CONF_GPMC_A10_PUDEN,
  CONF_GPMC_A10_PUTYPESEL,
  CONF_GPMC_A10_RXACTIVE,
  CONF_GPMC_A10_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X868,
  RESET = 0
};
enum class CONF_GPMC_A11 {
  CONF_GPMC_A11_MMODE,
  CONF_GPMC_A11_PUDEN,
  CONF_GPMC_A11_PUTYPESEL,
  CONF_GPMC_A11_RXACTIVE,
  CONF_GPMC_A11_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X86C,
  RESET = 0
};
enum class CONF_GPMC_WAIT0 {
  CONF_GPMC_WAIT0_MMODE,
  CONF_GPMC_WAIT0_PUDEN,
  CONF_GPMC_WAIT0_PUTYPESEL,
  CONF_GPMC_WAIT0_RXACTIVE,
  CONF_GPMC_WAIT0_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X870,
  RESET = 0
};
enum class CONF_GPMC_WPN {
  CONF_GPMC_WPN_MMODE,
  CONF_GPMC_WPN_PUDEN,
  CONF_GPMC_WPN_PUTYPESEL,
  CONF_GPMC_WPN_RXACTIVE,
  CONF_GPMC_WPN_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X874,
  RESET = 0
};
enum class CONF_GPMC_BEN1 {
  CONF_GPMC_BEN1_MMODE,
  CONF_GPMC_BEN1_PUDEN,
  CONF_GPMC_BEN1_PUTYPESEL,
  CONF_GPMC_BEN1_RXACTIVE,
  CONF_GPMC_BEN1_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X878,
  RESET = 0
};
enum class CONF_GPMC_CSN0 {
  CONF_GPMC_CSN0_MMODE,
  CONF_GPMC_CSN0_PUDEN,
  CONF_GPMC_CSN0_PUTYPESEL,
  CONF_GPMC_CSN0_RXACTIVE,
  CONF_GPMC_CSN0_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X87C,
  RESET = 0
};
enum class CONF_GPMC_CSN1 {
  CONF_GPMC_CSN1_MMODE,
  CONF_GPMC_CSN1_PUDEN,
  CONF_GPMC_CSN1_PUTYPESEL,
  CONF_GPMC_CSN1_RXACTIVE,
  CONF_GPMC_CSN1_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X880,
  RESET = 0
};
enum class CONF_GPMC_CSN2 {
  CONF_GPMC_CSN2_MMODE,
  CONF_GPMC_CSN2_PUDEN,
  CONF_GPMC_CSN2_PUTYPESEL,
  CONF_GPMC_CSN2_RXACTIVE,
  CONF_GPMC_CSN2_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X884,
  RESET = 0
};
enum class CONF_GPMC_CSN3 {
  CONF_GPMC_CSN3_MMODE,
  CONF_GPMC_CSN3_PUDEN,
  CONF_GPMC_CSN3_PUTYPESEL,
  CONF_GPMC_CSN3_RXACTIVE,
  CONF_GPMC_CSN3_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X888,
  RESET = 0
};
enum class CONF_GPMC_CLK {
  CONF_GPMC_CLK_MMODE,
  CONF_GPMC_CLK_PUDEN,
  CONF_GPMC_CLK_PUTYPESEL,
  CONF_GPMC_CLK_RXACTIVE,
  CONF_GPMC_CLK_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X88C,
  RESET = 0
};
enum class CONF_GPMC_ADVN_ALE {
  CONF_GPMC_ADVN_ALE_MMODE,
  CONF_GPMC_ADVN_ALE_PUDEN,
  CONF_GPMC_ADVN_ALE_PUTYPESEL,
  CONF_GPMC_ADVN_ALE_RXACTIVE,
  CONF_GPMC_ADVN_ALE_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X890,
  RESET = 0
};
enum class CONF_GPMC_OEN_REN {
  CONF_GPMC_OEN_REN_MMODE,
  CONF_GPMC_OEN_REN_PUDEN,
  CONF_GPMC_OEN_REN_PUTYPESEL,
  CONF_GPMC_OEN_REN_RXACTIVE,
  CONF_GPMC_OEN_REN_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X894,
  RESET = 0
};
enum class CONF_GPMC_WEN {
  CONF_GPMC_WEN_MMODE,
  CONF_GPMC_WEN_PUDEN,
  CONF_GPMC_WEN_PUTYPESEL,
  CONF_GPMC_WEN_RXACTIVE,
  CONF_GPMC_WEN_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X898,
  RESET = 0
};
enum class CONF_GPMC_BEN0_CLE {
  CONF_GPMC_BEN0_CLE_MMODE,
  CONF_GPMC_BEN0_CLE_PUDEN,
  CONF_GPMC_BEN0_CLE_PUTYPESEL,
  CONF_GPMC_BEN0_CLE_RXACTIVE,
  CONF_GPMC_BEN0_CLE_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X89C,
  RESET = 0
};
enum class CONF_LCD_DATA0 {
  CONF_LCD_DATA0_MMODE,
  CONF_LCD_DATA0_PUDEN,
  CONF_LCD_DATA0_PUTYPESEL,
  CONF_LCD_DATA0_RXACTIVE,
  CONF_LCD_DATA0_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8A0,
  RESET = 0
};
enum class CONF_LCD_DATA1 {
  CONF_LCD_DATA1_MMODE,
  CONF_LCD_DATA1_PUDEN,
  CONF_LCD_DATA1_PUTYPESEL,
  CONF_LCD_DATA1_RXACTIVE,
  CONF_LCD_DATA1_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8A4,
  RESET = 0
};
enum class CONF_LCD_DATA2 {
  CONF_LCD_DATA2_MMODE,
  CONF_LCD_DATA2_PUDEN,
  CONF_LCD_DATA2_PUTYPESEL,
  CONF_LCD_DATA2_RXACTIVE,
  CONF_LCD_DATA2_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8A8,
  RESET = 0
};
enum class CONF_LCD_DATA3 {
  CONF_LCD_DATA3_MMODE,
  CONF_LCD_DATA3_PUDEN,
  CONF_LCD_DATA3_PUTYPESEL,
  CONF_LCD_DATA3_RXACTIVE,
  CONF_LCD_DATA3_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8AC,
  RESET = 0
};
enum class CONF_LCD_DATA4 {
  CONF_LCD_DATA4_MMODE,
  CONF_LCD_DATA4_PUDEN,
  CONF_LCD_DATA4_PUTYPESEL,
  CONF_LCD_DATA4_RXACTIVE,
  CONF_LCD_DATA4_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8B0,
  RESET = 0
};
enum class CONF_LCD_DATA5 {
  CONF_LCD_DATA5_MMODE,
  CONF_LCD_DATA5_PUDEN,
  CONF_LCD_DATA5_PUTYPESEL,
  CONF_LCD_DATA5_RXACTIVE,
  CONF_LCD_DATA5_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8B4,
  RESET = 0
};
enum class CONF_LCD_DATA6 {
  CONF_LCD_DATA6_MMODE,
  CONF_LCD_DATA6_PUDEN,
  CONF_LCD_DATA6_PUTYPESEL,
  CONF_LCD_DATA6_RXACTIVE,
  CONF_LCD_DATA6_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8B8,
  RESET = 0
};
enum class CONF_LCD_DATA7 {
  CONF_LCD_DATA7_MMODE,
  CONF_LCD_DATA7_PUDEN,
  CONF_LCD_DATA7_PUTYPESEL,
  CONF_LCD_DATA7_RXACTIVE,
  CONF_LCD_DATA7_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8BC,
  RESET = 0
};
enum class CONF_LCD_DATA8 {
  CONF_LCD_DATA8_MMODE,
  CONF_LCD_DATA8_PUDEN,
  CONF_LCD_DATA8_PUTYPESEL,
  CONF_LCD_DATA8_RXACTIVE,
  CONF_LCD_DATA8_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8C0,
  RESET = 0
};
enum class CONF_LCD_DATA9 {
  CONF_LCD_DATA9_MMODE,
  CONF_LCD_DATA9_PUDEN,
  CONF_LCD_DATA9_PUTYPESEL,
  CONF_LCD_DATA9_RXACTIVE,
  CONF_LCD_DATA9_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8C4,
  RESET = 0
};
enum class CONF_LCD_DATA10 {
  CONF_LCD_DATA10_MMODE,
  CONF_LCD_DATA10_PUDEN,
  CONF_LCD_DATA10_PUTYPESEL,
  CONF_LCD_DATA10_RXACTIVE,
  CONF_LCD_DATA10_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8C8,
  RESET = 0
};
enum class CONF_LCD_DATA11 {
  CONF_LCD_DATA11_MMODE,
  CONF_LCD_DATA11_PUDEN,
  CONF_LCD_DATA11_PUTYPESEL,
  CONF_LCD_DATA11_RXACTIVE,
  CONF_LCD_DATA11_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8CC,
  RESET = 0
};
enum class CONF_LCD_DATA12 {
  CONF_LCD_DATA12_MMODE,
  CONF_LCD_DATA12_PUDEN,
  CONF_LCD_DATA12_PUTYPESEL,
  CONF_LCD_DATA12_RXACTIVE,
  CONF_LCD_DATA12_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8D0,
  RESET = 0
};
enum class CONF_LCD_DATA13 {
  CONF_LCD_DATA13_MMODE,
  CONF_LCD_DATA13_PUDEN,
  CONF_LCD_DATA13_PUTYPESEL,
  CONF_LCD_DATA13_RXACTIVE,
  CONF_LCD_DATA13_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8D4,
  RESET = 0
};
enum class CONF_LCD_DATA14 {
  CONF_LCD_DATA14_MMODE,
  CONF_LCD_DATA14_PUDEN,
  CONF_LCD_DATA14_PUTYPESEL,
  CONF_LCD_DATA14_RXACTIVE,
  CONF_LCD_DATA14_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8D8,
  RESET = 0
};
enum class CONF_LCD_DATA15 {
  CONF_LCD_DATA15_MMODE,
  CONF_LCD_DATA15_PUDEN,
  CONF_LCD_DATA15_PUTYPESEL,
  CONF_LCD_DATA15_RXACTIVE,
  CONF_LCD_DATA15_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8DC,
  RESET = 0
};
enum class CONF_LCD_VSYNC {
  CONF_LCD_VSYNC_MMODE,
  CONF_LCD_VSYNC_PUDEN,
  CONF_LCD_VSYNC_PUTYPESEL,
  CONF_LCD_VSYNC_RXACTIVE,
  CONF_LCD_VSYNC_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8E0,
  RESET = 0
};
enum class CONF_LCD_HSYNC {
  CONF_LCD_HSYNC_MMODE,
  CONF_LCD_HSYNC_PUDEN,
  CONF_LCD_HSYNC_PUTYPESEL,
  CONF_LCD_HSYNC_RXACTIVE,
  CONF_LCD_HSYNC_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8E4,
  RESET = 0
};
enum class CONF_LCD_PCLK {
  CONF_LCD_PCLK_MMODE,
  CONF_LCD_PCLK_PUDEN,
  CONF_LCD_PCLK_PUTYPESEL,
  CONF_LCD_PCLK_RXACTIVE,
  CONF_LCD_PCLK_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8E8,
  RESET = 0
};
enum class CONF_LCD_AC_BIAS_EN {
  CONF_LCD_AC_BIAS_EN_MMODE,
  CONF_LCD_AC_BIAS_EN_PUDEN,
  CONF_LCD_AC_BIAS_EN_PUTYPESEL,
  CONF_LCD_AC_BIAS_EN_RXACTIVE,
  CONF_LCD_AC_BIAS_EN_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8EC,
  RESET = 0
};
enum class CONF_MMC0_DAT3 {
  CONF_MMC0_DAT3_MMODE,
  CONF_MMC0_DAT3_PUDEN,
  CONF_MMC0_DAT3_PUTYPESEL,
  CONF_MMC0_DAT3_RXACTIVE,
  CONF_MMC0_DAT3_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8F0,
  RESET = 0
};
enum class CONF_MMC0_DAT2 {
  CONF_MMC0_DAT2_MMODE,
  CONF_MMC0_DAT2_PUDEN,
  CONF_MMC0_DAT2_PUTYPESEL,
  CONF_MMC0_DAT2_RXACTIVE,
  CONF_MMC0_DAT2_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8F4,
  RESET = 0
};
enum class CONF_MMC0_DAT1 {
  CONF_MMC0_DAT1_MMODE,
  CONF_MMC0_DAT1_PUDEN,
  CONF_MMC0_DAT1_PUTYPESEL,
  CONF_MMC0_DAT1_RXACTIVE,
  CONF_MMC0_DAT1_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8F8,
  RESET = 0
};
enum class CONF_MMC0_DAT0 {
  CONF_MMC0_DAT0_MMODE,
  CONF_MMC0_DAT0_PUDEN,
  CONF_MMC0_DAT0_PUTYPESEL,
  CONF_MMC0_DAT0_RXACTIVE,
  CONF_MMC0_DAT0_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X8FC,
  RESET = 0
};
enum class CONF_MMC0_CLK {
  CONF_MMC0_CLK_MMODE,
  CONF_MMC0_CLK_PUDEN,
  CONF_MMC0_CLK_PUTYPESEL,
  CONF_MMC0_CLK_RXACTIVE,
  CONF_MMC0_CLK_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X900,
  RESET = 0
};
enum class CONF_MMC0_CMD {
  CONF_MMC0_CMD_MMODE,
  CONF_MMC0_CMD_PUDEN,
  CONF_MMC0_CMD_PUTYPESEL,
  CONF_MMC0_CMD_RXACTIVE,
  CONF_MMC0_CMD_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X904,
  RESET = 0
};
enum class CONF_MII1_COL {
  CONF_MII1_COL_MMODE,
  CONF_MII1_COL_PUDEN,
  CONF_MII1_COL_PUTYPESEL,
  CONF_MII1_COL_RXACTIVE,
  CONF_MII1_COL_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X908,
  RESET = 0
};
enum class CONF_MII1_CRS {
  CONF_MII1_CRS_MMODE,
  CONF_MII1_CRS_PUDEN,
  CONF_MII1_CRS_PUTYPESEL,
  CONF_MII1_CRS_RXACTIVE,
  CONF_MII1_CRS_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X90C,
  RESET = 0
};
enum class CONF_MII1_RX_ER {
  CONF_MII1_RX_ER_MMODE,
  CONF_MII1_RX_ER_PUDEN,
  CONF_MII1_RX_ER_PUTYPESEL,
  CONF_MII1_RX_ER_RXACTIVE,
  CONF_MII1_RX_ER_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X910,
  RESET = 0
};
enum class CONF_MII1_TX_EN {
  CONF_MII1_TX_EN_MMODE,
  CONF_MII1_TX_EN_PUDEN,
  CONF_MII1_TX_EN_PUTYPESEL,
  CONF_MII1_TX_EN_RXACTIVE,
  CONF_MII1_TX_EN_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X914,
  RESET = 0
};
enum class CONF_MII1_RX_DV {
  CONF_MII1_RX_DV_MMODE,
  CONF_MII1_RX_DV_PUDEN,
  CONF_MII1_RX_DV_PUTYPESEL,
  CONF_MII1_RX_DV_RXACTIVE,
  CONF_MII1_RX_DV_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X918,
  RESET = 0
};
enum class CONF_MII1_TXD3 {
  CONF_MII1_TXD3_MMODE,
  CONF_MII1_TXD3_PUDEN,
  CONF_MII1_TXD3_PUTYPESEL,
  CONF_MII1_TXD3_RXACTIVE,
  CONF_MII1_TXD3_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X91C,
  RESET = 0
};
enum class CONF_MII1_TXD2 {
  CONF_MII1_TXD2_MMODE,
  CONF_MII1_TXD2_PUDEN,
  CONF_MII1_TXD2_PUTYPESEL,
  CONF_MII1_TXD2_RXACTIVE,
  CONF_MII1_TXD2_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X920,
  RESET = 0
};
enum class CONF_MII1_TXD1 {
  CONF_MII1_TXD1_MMODE,
  CONF_MII1_TXD1_PUDEN,
  CONF_MII1_TXD1_PUTYPESEL,
  CONF_MII1_TXD1_RXACTIVE,
  CONF_MII1_TXD1_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X924,
  RESET = 0
};
enum class CONF_MII1_TXD0 {
  CONF_MII1_TXD0_MMODE,
  CONF_MII1_TXD0_PUDEN,
  CONF_MII1_TXD0_PUTYPESEL,
  CONF_MII1_TXD0_RXACTIVE,
  CONF_MII1_TXD0_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X928,
  RESET = 0
};
enum class CONF_MII1_TX_CLK {
  CONF_MII1_TX_CLK_MMODE,
  CONF_MII1_TX_CLK_PUDEN,
  CONF_MII1_TX_CLK_PUTYPESEL,
  CONF_MII1_TX_CLK_RXACTIVE,
  CONF_MII1_TX_CLK_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X92C,
  RESET = 0
};
enum class CONF_MII1_RX_CLK {
  CONF_MII1_RX_CLK_MMODE,
  CONF_MII1_RX_CLK_PUDEN,
  CONF_MII1_RX_CLK_PUTYPESEL,
  CONF_MII1_RX_CLK_RXACTIVE,
  CONF_MII1_RX_CLK_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X930,
  RESET = 0
};
enum class CONF_MII1_RXD3 {
  CONF_MII1_RXD3_MMODE,
  CONF_MII1_RXD3_PUDEN,
  CONF_MII1_RXD3_PUTYPESEL,
  CONF_MII1_RXD3_RXACTIVE,
  CONF_MII1_RXD3_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X934,
  RESET = 0
};
enum class CONF_MII1_RXD2 {
  CONF_MII1_RXD2_MMODE,
  CONF_MII1_RXD2_PUDEN,
  CONF_MII1_RXD2_PUTYPESEL,
  CONF_MII1_RXD2_RXACTIVE,
  CONF_MII1_RXD2_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X938,
  RESET = 0
};
enum class CONF_MII1_RXD1 {
  CONF_MII1_RXD1_MMODE,
  CONF_MII1_RXD1_PUDEN,
  CONF_MII1_RXD1_PUTYPESEL,
  CONF_MII1_RXD1_RXACTIVE,
  CONF_MII1_RXD1_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X93C,
  RESET = 0
};
enum class CONF_MII1_RXD0 {
  CONF_MII1_RXD0_MMODE,
  CONF_MII1_RXD0_PUDEN,
  CONF_MII1_RXD0_PUTYPESEL,
  CONF_MII1_RXD0_RXACTIVE,
  CONF_MII1_RXD0_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X940,
  RESET = 0
};
enum class CONF_RMII1_REF_CLK {
  CONF_RMII1_REF_CLK_MMODE,
  CONF_RMII1_REF_CLK_PUDEN,
  CONF_RMII1_REF_CLK_PUTYPESEL,
  CONF_RMII1_REF_CLK_RXACTIVE,
  CONF_RMII1_REF_CLK_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X944,
  RESET = 0
};
enum class CONF_MDIO { RESERVED = -1, OFFSET = 0X948, RESET = 0 };
enum class CONF_MDC { RESERVED = -1, OFFSET = 0X94C, RESET = 0 };
enum class CONF_SPI0_SCLK {
  CONF_SPI0_SCLK_MMODE,
  CONF_SPI0_SCLK_PUDEN,
  CONF_SPI0_SCLK_PUTYPESEL,
  CONF_SPI0_SCLK_RXACTIVE,
  CONF_SPI0_SCLK_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X950,
  RESET = 0
};
enum class CONF_SPI0_D0 {
  CONF_SPI0_D0_MMODE,
  CONF_SPI0_D0_PUDEN,
  CONF_SPI0_D0_PUTYPESEL,
  CONF_SPI0_D0_RXACTIVE,
  CONF_SPI0_D0_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X954,
  RESET = 0
};
enum class CONF_SPI0_D1 {
  CONF_SPI0_D1_MMODE,
  CONF_SPI0_D1_PUDEN,
  CONF_SPI0_D1_PUTYPESEL,
  CONF_SPI0_D1_RXACTIVE,
  CONF_SPI0_D1_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X958,
  RESET = 0
};
enum class CONF_SPI0_CS0 {
  CONF_SPI0_CS0_MMODE,
  CONF_SPI0_CS0_PUDEN,
  CONF_SPI0_CS0_PUTYPESEL,
  CONF_SPI0_CS0_RXACTIVE,
  CONF_SPI0_CS0_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X95C,
  RESET = 0
};
enum class CONF_SPI0_CS1 {
  CONF_SPI0_CS1_MMODE,
  CONF_SPI0_CS1_PUDEN,
  CONF_SPI0_CS1_PUTYPESEL,
  CONF_SPI0_CS1_RXACTIVE,
  CONF_SPI0_CS1_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X960,
  RESET = 0
};
enum class CONF_ECAP0_IN_PWM0_OUT {
  CONF_ECAP0_IN_PWM0_OUT_MMODE,
  CONF_ECAP0_IN_PWM0_OUT_PUDEN,
  CONF_ECAP0_IN_PWM0_OUT_PUTYPESEL,
  CONF_ECAP0_IN_PWM0_OUT_RXACTIVE,
  CONF_ECAP0_IN_PWM0_OUT_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X964,
  RESET = 0
};
enum class CONF_UART0_CTSN {
  CONF_UART0_CTSN_MMODE,
  CONF_UART0_CTSN_PUDEN,
  CONF_UART0_CTSN_PUTYPESEL,
  CONF_UART0_CTSN_RXACTIVE,
  CONF_UART0_CTSN_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X968,
  RESET = 0
};
enum class CONF_UART0_RTSN {
  CONF_UART0_RTSN_MMODE,
  CONF_UART0_RTSN_PUDEN,
  CONF_UART0_RTSN_PUTYPESEL,
  CONF_UART0_RTSN_RXACTIVE,
  CONF_UART0_RTSN_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X96C,
  RESET = 0
};
enum class CONF_UART0_RXD {
  CONF_UART0_RXD_MMODE,
  CONF_UART0_RXD_PUDEN,
  CONF_UART0_RXD_PUTYPESEL,
  CONF_UART0_RXD_RXACTIVE,
  CONF_UART0_RXD_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X970,
  RESET = 0
};
enum class CONF_UART0_TXD {
  CONF_UART0_TXD_MMODE,
  CONF_UART0_TXD_PUDEN,
  CONF_UART0_TXD_PUTYPESEL,
  CONF_UART0_TXD_RXACTIVE,
  CONF_UART0_TXD_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X974,
  RESET = 0
};
enum class CONF_UART1_CTSN {
  CONF_UART1_CTSN_MMODE,
  CONF_UART1_CTSN_PUDEN,
  CONF_UART1_CTSN_PUTYPESEL,
  CONF_UART1_CTSN_RXACTIVE,
  CONF_UART1_CTSN_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X978,
  RESET = 0
};
enum class CONF_UART1_RTSN {
  CONF_UART1_RTSN_MMODE,
  CONF_UART1_RTSN_PUDEN,
  CONF_UART1_RTSN_PUTYPESEL,
  CONF_UART1_RTSN_RXACTIVE,
  CONF_UART1_RTSN_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X97C,
  RESET = 0
};
enum class CONF_UART1_RXD {
  CONF_UART1_RXD_MMODE,
  CONF_UART1_RXD_PUDEN,
  CONF_UART1_RXD_PUTYPESEL,
  CONF_UART1_RXD_RXACTIVE,
  CONF_UART1_RXD_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X980,
  RESET = 0
};
enum class CONF_UART1_TXD {
  CONF_UART1_TXD_MMODE,
  CONF_UART1_TXD_PUDEN,
  CONF_UART1_TXD_PUTYPESEL,
  CONF_UART1_TXD_RXACTIVE,
  CONF_UART1_TXD_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X984,
  RESET = 0
};
enum class CONF_I2C0_SDA {
  CONF_I2C0_SDA_MMODE,
  CONF_I2C0_SDA_PUDEN,
  CONF_I2C0_SDA_PUTYPESEL,
  CONF_I2C0_SDA_RXACTIVE,
  CONF_I2C0_SDA_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X988,
  RESET = 0
};
enum class CONF_I2C0_SCL {
  CONF_I2C0_SCL_MMODE,
  CONF_I2C0_SCL_PUDEN,
  CONF_I2C0_SCL_PUTYPESEL,
  CONF_I2C0_SCL_RXACTIVE,
  CONF_I2C0_SCL_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X98C,
  RESET = 0
};
enum class CONF_MCASP0_ACLKX {
  CONF_MCASP0_ACLKX_MMODE,
  CONF_MCASP0_ACLKX_PUDEN,
  CONF_MCASP0_ACLKX_PUTYPESEL,
  CONF_MCASP0_ACLKX_RXACTIVE,
  CONF_MCASP0_ACLKX_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X990,
  RESET = 0
};
enum class CONF_MCASP0_FSX {
  CONF_MCASP0_FSX_MMODE,
  CONF_MCASP0_FSX_PUDEN,
  CONF_MCASP0_FSX_PUTYPESEL,
  CONF_MCASP0_FSX_RXACTIVE,
  CONF_MCASP0_FSX_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X994,
  RESET = 0
};
enum class CONF_MCASP0_AXR0 {
  CONF_MCASP0_AXR0_MMODE,
  CONF_MCASP0_AXR0_PUDEN,
  CONF_MCASP0_AXR0_PUTYPESEL,
  CONF_MCASP0_AXR0_RXACTIVE,
  CONF_MCASP0_AXR0_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X998,
  RESET = 0
};
enum class CONF_MCASP0_AHCLKR {
  CONF_MCASP0_AHCLKR_MMODE,
  CONF_MCASP0_AHCLKR_PUDEN,
  CONF_MCASP0_AHCLKR_PUTYPESEL,
  CONF_MCASP0_AHCLKR_RXACTIVE,
  CONF_MCASP0_AHCLKR_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X99C,
  RESET = 0
};
enum class CONF_MCASP0_ACLKR {
  CONF_MCASP0_ACLKR_MMODE,
  CONF_MCASP0_ACLKR_PUDEN,
  CONF_MCASP0_ACLKR_PUTYPESEL,
  CONF_MCASP0_ACLKR_RXACTIVE,
  CONF_MCASP0_ACLKR_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X9A0,
  RESET = 0
};
enum class CONF_MCASP0_FSR {
  CONF_MCASP0_FSR_MMODE,
  CONF_MCASP0_FSR_PUDEN,
  CONF_MCASP0_FSR_PUTYPESEL,
  CONF_MCASP0_FSR_RXACTIVE,
  CONF_MCASP0_FSR_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X9A4,
  RESET = 0
};
enum class CONF_MCASP0_AXR1 {
  CONF_MCASP0_AXR1_MMODE,
  CONF_MCASP0_AXR1_PUDEN,
  CONF_MCASP0_AXR1_PUTYPESEL,
  CONF_MCASP0_AXR1_RXACTIVE,
  CONF_MCASP0_AXR1_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X9A8,
  RESET = 0
};
enum class CONF_MCASP0_AHCLKX {
  CONF_MCASP0_AHCLKX_MMODE,
  CONF_MCASP0_AHCLKX_PUDEN,
  CONF_MCASP0_AHCLKX_PUTYPESEL,
  CONF_MCASP0_AHCLKX_RXACTIVE,
  CONF_MCASP0_AHCLKX_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X9AC,
  RESET = 0
};
enum class CONF_XDMA_EVENT_INTR0 {
  CONF_XDMA_EVENT_INTR0_MMODE,
  CONF_XDMA_EVENT_INTR0_PUDEN,
  CONF_XDMA_EVENT_INTR0_PUTYPESEL,
  CONF_XDMA_EVENT_INTR0_RXACTIVE,
  CONF_XDMA_EVENT_INTR0_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X9B0,
  RESET = 0
};
enum class CONF_XDMA_EVENT_INTR1 {
  CONF_XDMA_EVENT_INTR1_MMODE,
  CONF_XDMA_EVENT_INTR1_PUDEN,
  CONF_XDMA_EVENT_INTR1_PUTYPESEL,
  CONF_XDMA_EVENT_INTR1_RXACTIVE,
  CONF_XDMA_EVENT_INTR1_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X9B4,
  RESET = 0
};
enum class CONF_WARMRSTN { RESERVED = -1, OFFSET = 0X9B8, RESET = 0 };
enum class CONF_NNMI { RESERVED = -1, OFFSET = 0X9C0, RESET = 0 };
enum class CONF_TMS { RESERVED = -1, OFFSET = 0X9D0, RESET = 0 };
enum class CONF_TDI { RESERVED = -1, OFFSET = 0X9D4, RESET = 0 };
enum class CONF_TDO { RESERVED = -1, OFFSET = 0X9D8, RESET = 0 };
enum class CONF_TCK { RESERVED = -1, OFFSET = 0X9DC, RESET = 0 };
enum class CONF_TRSTN { RESERVED = -1, OFFSET = 0X9E0, RESET = 0 };
enum class CONF_EMU0 { RESERVED = -1, OFFSET = 0X9E4, RESET = 0 };
enum class CONF_EMU1 { RESERVED = -1, OFFSET = 0X9E8, RESET = 0 };
enum class CONF_RTC_PWRONRSTN {
  CONF_RTC_PWRONRSTN_MMODE,
  CONF_RTC_PWRONRSTN_PUDEN,
  CONF_RTC_PWRONRSTN_PUTYPESEL,
  CONF_RTC_PWRONRSTN_RXACTIVE,
  CONF_RTC_PWRONRSTN_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X9F8,
  RESET = 0
};
enum class CONF_PMIC_POWER_EN {
  CONF_PMIC_POWER_EN_MMODE,
  CONF_PMIC_POWER_EN_PUDEN,
  CONF_PMIC_POWER_EN_PUTYPESEL,
  CONF_PMIC_POWER_EN_RXACTIVE,
  CONF_PMIC_POWER_EN_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0X9FC,
  RESET = 0
};
enum class CONF_EXT_WAKEUP {
  CONF_EXT_WAKEUP_MMODE,
  CONF_EXT_WAKEUP_PUDEN,
  CONF_EXT_WAKEUP_PUTYPESEL,
  CONF_EXT_WAKEUP_RXACTIVE,
  CONF_EXT_WAKEUP_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0XA00,
  RESET = 0
};
enum class CONF_USB0_DRVVBUS {
  CONF_USB0_DRVVBUS_MMODE,
  CONF_USB0_DRVVBUS_PUDEN,
  CONF_USB0_DRVVBUS_PUTYPESEL,
  CONF_USB0_DRVVBUS_RXACTIVE,
  CONF_USB0_DRVVBUS_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0XA1C,
  RESET = 0
};
enum class CONF_USB1_DRVVBUS {
  CONF_USB1_DRVVBUS_MMODE,
  CONF_USB1_DRVVBUS_PUDEN,
  CONF_USB1_DRVVBUS_PUTYPESEL,
  CONF_USB1_DRVVBUS_RXACTIVE,
  CONF_USB1_DRVVBUS_SLEWCTRL,
  RESERVED = -1,
  OFFSET = 0XA34,
  RESET = 0
};
enum class CQDETECT_STATUS { RESERVED = -1, OFFSET = 0XE00, RESET = 0 };
enum class DDR_IO_CTRL { RESERVED = -1, OFFSET = 0XE04, RESET = 0 };
enum class VTP_CTRL { RESERVED = -1, OFFSET = 0XE0C, RESET = 0 };
enum class VREF_CTRL { RESERVED = -1, OFFSET = 0XE14, RESET = 0 };
enum class TPCC_EVT_MUX_0_3 {
  EVT_MUX_0,
  RESERVED0,
  EVT_MUX_1,
  RESERVED1,
  EVT_MUX_2,
  RESERVED2,
  EVT_MUX_3,
  RESERVED = -1,
  OFFSET = 0XF90,
  RESET = 0
};
enum class TPCC_EVT_MUX_4_7 {
  EVT_MUX_4,
  RESERVED0,
  EVT_MUX_5,
  RESERVED1,
  EVT_MUX_6,
  RESERVED2,
  EVT_MUX_7,
  RESERVED = -1,
  OFFSET = 0XF94,
  RESET = 0
};
enum class TPCC_EVT_MUX_8_11 {
  EVT_MUX_8,
  RESERVED0,
  EVT_MUX_9,
  RESERVED1,
  EVT_MUX_10,
  RESERVED2,
  EVT_MUX_11,
  RESERVED = -1,
  OFFSET = 0XF98,
  RESET = 0
};
enum class TPCC_EVT_MUX_12_15 {
  EVT_MUX_12,
  RESERVED0,
  EVT_MUX_13,
  RESERVED1,
  EVT_MUX_14,
  RESERVED2,
  EVT_MUX_15,
  RESERVED = -1,
  OFFSET = 0XF9C,
  RESET = 0
};
enum class TPCC_EVT_MUX_16_19 {
  EVT_MUX_16,
  RESERVED0,
  EVT_MUX_17,
  RESERVED1,
  EVT_MUX_18,
  RESERVED2,
  EVT_MUX_19,
  RESERVED = -1,
  OFFSET = 0XFA0,
  RESET = 0
};
enum class TPCC_EVT_MUX_20_23 {
  EVT_MUX_20,
  RESERVED0,
  EVT_MUX_21,
  RESERVED1,
  EVT_MUX_22,
  RESERVED2,
  EVT_MUX_23,
  RESERVED = -1,
  OFFSET = 0XFA4,
  RESET = 0
};
enum class TPCC_EVT_MUX_24_27 {
  EVT_MUX_24,
  RESERVED0,
  EVT_MUX_25,
  RESERVED1,
  EVT_MUX_26,
  RESERVED2,
  EVT_MUX_27,
  RESERVED = -1,
  OFFSET = 0XFA8,
  RESET = 0
};
enum class TPCC_EVT_MUX_28_31 {
  EVT_MUX_28,
  RESERVED0,
  EVT_MUX_29,
  RESERVED1,
  EVT_MUX_30,
  RESERVED2,
  EVT_MUX_31,
  RESERVED = -1,
  OFFSET = 0XFAC,
  RESET = 0
};
enum class TPCC_EVT_MUX_32_35 {
  EVT_MUX_32,
  RESERVED0,
  EVT_MUX_33,
  RESERVED1,
  EVT_MUX_34,
  RESERVED2,
  EVT_MUX_35,
  RESERVED = -1,
  OFFSET = 0XFB0,
  RESET = 0
};
enum class TPCC_EVT_MUX_36_39 {
  EVT_MUX_36,
  RESERVED0,
  EVT_MUX_37,
  RESERVED1,
  EVT_MUX_38,
  RESERVED2,
  EVT_MUX_39,
  RESERVED = -1,
  OFFSET = 0XFB4,
  RESET = 0
};
enum class TPCC_EVT_MUX_40_43 {
  EVT_MUX_40,
  RESERVED0,
  EVT_MUX_41,
  RESERVED1,
  EVT_MUX_42,
  RESERVED2,
  EVT_MUX_43,
  RESERVED = -1,
  OFFSET = 0XFB8,
  RESET = 0
};
enum class TPCC_EVT_MUX_44_47 {
  EVT_MUX_44,
  RESERVED0,
  EVT_MUX_45,
  RESERVED1,
  EVT_MUX_46,
  RESERVED2,
  EVT_MUX_47,
  RESERVED = -1,
  OFFSET = 0XFBC,
  RESET = 0
};
enum class TPCC_EVT_MUX_48_51 {
  EVT_MUX_48,
  RESERVED0,
  EVT_MUX_49,
  RESERVED1,
  EVT_MUX_50,
  RESERVED2,
  EVT_MUX_51,
  RESERVED = -1,
  OFFSET = 0XFC0,
  RESET = 0
};
enum class TPCC_EVT_MUX_52_55 {
  EVT_MUX_52,
  RESERVED0,
  EVT_MUX_53,
  RESERVED1,
  EVT_MUX_54,
  RESERVED2,
  EVT_MUX_55,
  RESERVED = -1,
  OFFSET = 0XFC4,
  RESET = 0
};
enum class TPCC_EVT_MUX_56_59 {
  EVT_MUX_56,
  RESERVED0,
  EVT_MUX_57,
  RESERVED1,
  EVT_MUX_58,
  RESERVED2,
  EVT_MUX_59,
  RESERVED = -1,
  OFFSET = 0XFC8,
  RESET = 0
};
enum class TPCC_EVT_MUX_60_63 {
  EVT_MUX_60,
  RESERVED0,
  EVT_MUX_61,
  RESERVED1,
  EVT_MUX_62,
  RESERVED2,
  EVT_MUX_63,
  RESERVED = -1,
  OFFSET = 0XFCC,
  RESET = 0
};
enum class TIMER_EVT_CAPT { RESERVED = -1, OFFSET = 0XFD0, RESET = 0 };
enum class ECAP_EVT_CAPT { RESERVED = -1, OFFSET = 0XFD4, RESET = 0 };
enum class ADC_EVT_CAPT { RESERVED = -1, OFFSET = 0XFD8, RESET = 0 };
enum class RESET_ISO { RESERVED = -1, OFFSET = 0X1000, RESET = 0 };
enum class DPLL_PWR_SW_CTRL { RESERVED = -1, OFFSET = 0X1318, RESET = 0 };
enum class DDR_CKE_CTRL { RESERVED = -1, OFFSET = 0X131C, RESET = 0 };
enum class SMA2 { RESERVED = -1, OFFSET = 0X1320, RESET = 0 };
enum class M3_TXEV_EOI { RESERVED = -1, OFFSET = 0X1324, RESET = 0 };
enum class IPC_MSG_REG0 {
  IPC_MSG_REG0,
  RESERVED = -1,
  OFFSET = 0X1328,
  RESET = 0
};
enum class IPC_MSG_REG1 {
  IPC_MSG_REG1,
  RESERVED = -1,
  OFFSET = 0X132C,
  RESET = 0
};
enum class IPC_MSG_REG2 {
  IPC_MSG_REG2,
  RESERVED = -1,
  OFFSET = 0X1330,
  RESET = 0
};
enum class IPC_MSG_REG3 {
  IPC_MSG_REG3,
  RESERVED = -1,
  OFFSET = 0X1334,
  RESET = 0
};
enum class IPC_MSG_REG4 {
  IPC_MSG_REG4,
  RESERVED = -1,
  OFFSET = 0X1338,
  RESET = 0
};
enum class IPC_MSG_REG5 {
  IPC_MSG_REG5,
  RESERVED = -1,
  OFFSET = 0X133C,
  RESET = 0
};
enum class IPC_MSG_REG6 {
  IPC_MSG_REG6,
  RESERVED = -1,
  OFFSET = 0X1340,
  RESET = 0
};
enum class IPC_MSG_REG7 {
  IPC_MSG_REG7,
  RESERVED = -1,
  OFFSET = 0X1344,
  RESET = 0
};
enum class DDR_CMD0_IOCTRL { RESERVED = -1, OFFSET = 0X1404, RESET = 0 };
enum class DDR_CMD1_IOCTRL { RESERVED = -1, OFFSET = 0X1408, RESET = 0 };
enum class DDR_CMD2_IOCTRL { RESERVED = -1, OFFSET = 0X140C, RESET = 0 };
enum class DDR_DATA0_IOCTRL { RESERVED = -1, OFFSET = 0X1440, RESET = 0 };
enum class DDR_DATA1_IOCTRL { RESERVED = -1, OFFSET = 0X1444, RESET = 0 };

using CONTROL_REVISION_REG = offset_register<CONTROL_REVISION, 1>;
using CONTROL_HWINFO_REG = offset_register<CONTROL_HWINFO, 1>;
using CONTROL_SYSCONFIG_REG = offset_register<CONTROL_SYSCONFIG, 1>;
using CONTROL_STATUS_REG = offset_register<CONTROL_STATUS, 1>;
using CONTROL_EMIF_SDRAM_CONFIG_REG =
    offset_register<CONTROL_EMIF_SDRAM_CONFIG, 1>;
using CORE_SLDO_CTRL_REG = offset_register<CORE_SLDO_CTRL, 1>;
using MPU_SLDO_CTRL_REG = offset_register<MPU_SLDO_CTRL, 1>;
using CLK32KDIVRATIO_CTRL_REG = offset_register<CLK32KDIVRATIO_CTRL, 1>;
using BANDGAP_CTRL_REG = offset_register<BANDGAP_CTRL, 1>;
using BANDGAP_TRIM_REG = offset_register<BANDGAP_TRIM, 1>;
using PLL_CLKINPULOW_CTRL_REG = offset_register<PLL_CLKINPULOW_CTRL, 1>;
using MOSC_CTRL_REG = offset_register<MOSC_CTRL, 1>;
using DEEPSLEEP_CTRL_REG = offset_register<DEEPSLEEP_CTRL, 1>;
using DPLL_PWR_SW_STATUS_REG = offset_register<DPLL_PWR_SW_STATUS, 1>;
using DEVICE_ID_REG = offset_register<DEVICE_ID, 1>;
using DEV_FEATURE_REG = offset_register<DEV_FEATURE, 1>;
using INIT_PRIORITY_0_REG = offset_register<INIT_PRIORITY_0, 1>;
using INIT_PRIORITY_1_REG = offset_register<INIT_PRIORITY_1, 1>;
using TPTC_CFG_REG = offset_register<TPTC_CFG, 1>;
using USB_CTRL0_REG = offset_register<USB_CTRL0, 1>;
using USB_STS0_REG = offset_register<USB_STS0, 1>;
using USB_CTRL1_REG = offset_register<USB_CTRL1, 1>;
using USB_STS1_REG = offset_register<USB_STS1, 1>;
using MAC_ID0_LO_REG = offset_register<MAC_ID0_LO, 1>;
using MAC_ID0_HI_REG = offset_register<MAC_ID0_HI, 1>;
using MAC_ID1_LO_REG = offset_register<MAC_ID1_LO, 1>;
using MAC_ID1_HI_REG = offset_register<MAC_ID1_HI, 1>;
using DCAN_RAMINIT_REG = offset_register<DCAN_RAMINIT, 1>;
using USB_WKUP_CTRL_REG = offset_register<USB_WKUP_CTRL, 1>;
using GMII_SEL_REG = offset_register<GMII_SEL, 1>;
using PWMSS_CTRL_REG = offset_register<PWMSS_CTRL, 1>;
using MREQPRIO_0_REG = offset_register<MREQPRIO_0, 1>;
using MREQPRIO_1_REG = offset_register<MREQPRIO_1, 1>;
using HW_EVENT_SEL_GRP1_REG = offset_register<HW_EVENT_SEL_GRP1, 1>;
using HW_EVENT_SEL_GRP2_REG = offset_register<HW_EVENT_SEL_GRP2, 1>;
using HW_EVENT_SEL_GRP3_REG = offset_register<HW_EVENT_SEL_GRP3, 1>;
using HW_EVENT_SEL_GRP4_REG = offset_register<HW_EVENT_SEL_GRP4, 1>;
using SMRT_CTRL_REG = offset_register<SMRT_CTRL, 1>;
using MPUSS_HW_DEBUG_SEL_REG = offset_register<MPUSS_HW_DEBUG_SEL, 1>;
using MPUSS_HW_DBG_INFO_REG = offset_register<MPUSS_HW_DBG_INFO, 1>;
using VDD_MPU_OPP_050_REG = offset_register<VDD_MPU_OPP_050, 1>;
using VDD_MPU_OPP_100_REG = offset_register<VDD_MPU_OPP_100, 1>;
using VDD_MPU_OPP_120_REG = offset_register<VDD_MPU_OPP_120, 1>;
using VDD_MPU_OPP_TURBO_REG = offset_register<VDD_MPU_OPP_TURBO, 1>;
using VDD_CORE_OPP_050_REG = offset_register<VDD_CORE_OPP_050, 1>;
using VDD_CORE_OPP_100_REG = offset_register<VDD_CORE_OPP_100, 1>;
using BB_SCALE_REG = offset_register<BB_SCALE, 1>;
using USB_VID_PID_REG = offset_register<USB_VID_PID, 1>;
using EFUSE_SMA_REG = offset_register<EFUSE_SMA, 1>;
using CONF_GPMC_AD0_REG = offset_register<CONF_GPMC_AD0, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_AD1_REG = offset_register<CONF_GPMC_AD1, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_AD2_REG = offset_register<CONF_GPMC_AD2, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_AD3_REG = offset_register<CONF_GPMC_AD3, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_AD4_REG = offset_register<CONF_GPMC_AD4, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_AD5_REG = offset_register<CONF_GPMC_AD5, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_AD6_REG = offset_register<CONF_GPMC_AD6, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_AD7_REG = offset_register<CONF_GPMC_AD7, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_AD8_REG = offset_register<CONF_GPMC_AD8, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_AD9_REG = offset_register<CONF_GPMC_AD9, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_AD10_REG = offset_register<CONF_GPMC_AD10, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_AD11_REG = offset_register<CONF_GPMC_AD11, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_AD12_REG = offset_register<CONF_GPMC_AD12, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_AD13_REG = offset_register<CONF_GPMC_AD13, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_AD14_REG = offset_register<CONF_GPMC_AD14, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_AD15_REG = offset_register<CONF_GPMC_AD15, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_A0_REG = offset_register<CONF_GPMC_A0, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_A1_REG = offset_register<CONF_GPMC_A1, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_A2_REG = offset_register<CONF_GPMC_A2, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_A3_REG = offset_register<CONF_GPMC_A3, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_A4_REG = offset_register<CONF_GPMC_A4, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_A5_REG = offset_register<CONF_GPMC_A5, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_A6_REG = offset_register<CONF_GPMC_A6, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_A7_REG = offset_register<CONF_GPMC_A7, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_A8_REG = offset_register<CONF_GPMC_A8, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_A9_REG = offset_register<CONF_GPMC_A9, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_A10_REG = offset_register<CONF_GPMC_A10, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_A11_REG = offset_register<CONF_GPMC_A11, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_WAIT0_REG = offset_register<CONF_GPMC_WAIT0, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_WPN_REG = offset_register<CONF_GPMC_WPN, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_BEN1_REG = offset_register<CONF_GPMC_BEN1, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_CSN0_REG = offset_register<CONF_GPMC_CSN0, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_CSN1_REG = offset_register<CONF_GPMC_CSN1, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_CSN2_REG = offset_register<CONF_GPMC_CSN2, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_CSN3_REG = offset_register<CONF_GPMC_CSN3, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_CLK_REG = offset_register<CONF_GPMC_CLK, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_ADVN_ALE_REG =
    offset_register<CONF_GPMC_ADVN_ALE, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_OEN_REN_REG =
    offset_register<CONF_GPMC_OEN_REN, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_WEN_REG = offset_register<CONF_GPMC_WEN, 3, 1, 1, 1, 1, 25>;
using CONF_GPMC_BEN0_CLE_REG =
    offset_register<CONF_GPMC_BEN0_CLE, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA0_REG = offset_register<CONF_LCD_DATA0, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA1_REG = offset_register<CONF_LCD_DATA1, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA2_REG = offset_register<CONF_LCD_DATA2, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA3_REG = offset_register<CONF_LCD_DATA3, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA4_REG = offset_register<CONF_LCD_DATA4, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA5_REG = offset_register<CONF_LCD_DATA5, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA6_REG = offset_register<CONF_LCD_DATA6, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA7_REG = offset_register<CONF_LCD_DATA7, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA8_REG = offset_register<CONF_LCD_DATA8, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA9_REG = offset_register<CONF_LCD_DATA9, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA10_REG = offset_register<CONF_LCD_DATA10, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA11_REG = offset_register<CONF_LCD_DATA11, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA12_REG = offset_register<CONF_LCD_DATA12, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA13_REG = offset_register<CONF_LCD_DATA13, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA14_REG = offset_register<CONF_LCD_DATA14, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_DATA15_REG = offset_register<CONF_LCD_DATA15, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_VSYNC_REG = offset_register<CONF_LCD_VSYNC, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_HSYNC_REG = offset_register<CONF_LCD_HSYNC, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_PCLK_REG = offset_register<CONF_LCD_PCLK, 3, 1, 1, 1, 1, 25>;
using CONF_LCD_AC_BIAS_EN_REG =
    offset_register<CONF_LCD_AC_BIAS_EN, 3, 1, 1, 1, 1, 25>;
using CONF_MMC0_DAT3_REG = offset_register<CONF_MMC0_DAT3, 3, 1, 1, 1, 1, 25>;
using CONF_MMC0_DAT2_REG = offset_register<CONF_MMC0_DAT2, 3, 1, 1, 1, 1, 25>;
using CONF_MMC0_DAT1_REG = offset_register<CONF_MMC0_DAT1, 3, 1, 1, 1, 1, 25>;
using CONF_MMC0_DAT0_REG = offset_register<CONF_MMC0_DAT0, 3, 1, 1, 1, 1, 25>;
using CONF_MMC0_CLK_REG = offset_register<CONF_MMC0_CLK, 3, 1, 1, 1, 1, 25>;
using CONF_MMC0_CMD_REG = offset_register<CONF_MMC0_CMD, 3, 1, 1, 1, 1, 25>;
using CONF_MII1_COL_REG = offset_register<CONF_MII1_COL, 3, 1, 1, 1, 1, 25>;
using CONF_MII1_CRS_REG = offset_register<CONF_MII1_CRS, 3, 1, 1, 1, 1, 25>;
using CONF_MII1_RX_ER_REG = offset_register<CONF_MII1_RX_ER, 3, 1, 1, 1, 1, 25>;
using CONF_MII1_TX_EN_REG = offset_register<CONF_MII1_TX_EN, 3, 1, 1, 1, 1, 25>;
using CONF_MII1_RX_DV_REG = offset_register<CONF_MII1_RX_DV, 3, 1, 1, 1, 1, 25>;
using CONF_MII1_TXD3_REG = offset_register<CONF_MII1_TXD3, 3, 1, 1, 1, 1, 25>;
using CONF_MII1_TXD2_REG = offset_register<CONF_MII1_TXD2, 3, 1, 1, 1, 1, 25>;
using CONF_MII1_TXD1_REG = offset_register<CONF_MII1_TXD1, 3, 1, 1, 1, 1, 25>;
using CONF_MII1_TXD0_REG = offset_register<CONF_MII1_TXD0, 3, 1, 1, 1, 1, 25>;
using CONF_MII1_TX_CLK_REG =
    offset_register<CONF_MII1_TX_CLK, 3, 1, 1, 1, 1, 25>;
using CONF_MII1_RX_CLK_REG =
    offset_register<CONF_MII1_RX_CLK, 3, 1, 1, 1, 1, 25>;
using CONF_MII1_RXD3_REG = offset_register<CONF_MII1_RXD3, 3, 1, 1, 1, 1, 25>;
using CONF_MII1_RXD2_REG = offset_register<CONF_MII1_RXD2, 3, 1, 1, 1, 1, 25>;
using CONF_MII1_RXD1_REG = offset_register<CONF_MII1_RXD1, 3, 1, 1, 1, 1, 25>;
using CONF_MII1_RXD0_REG = offset_register<CONF_MII1_RXD0, 3, 1, 1, 1, 1, 25>;
using CONF_RMII1_REF_CLK_REG =
    offset_register<CONF_RMII1_REF_CLK, 3, 1, 1, 1, 1, 25>;
using CONF_MDIO_REG = offset_register<CONF_MDIO, 3, 1, 1, 1, 1, 25>;
using CONF_MDC_REG = offset_register<CONF_MDC, 3, 1, 1, 1, 1, 25>;
using CONF_SPI0_SCLK_REG = offset_register<CONF_SPI0_SCLK, 3, 1, 1, 1, 1, 25>;
using CONF_SPI0_D0_REG = offset_register<CONF_SPI0_D0, 3, 1, 1, 1, 1, 25>;
using CONF_SPI0_D1_REG = offset_register<CONF_SPI0_D1, 3, 1, 1, 1, 1, 25>;
using CONF_SPI0_CS0_REG = offset_register<CONF_SPI0_CS0, 3, 1, 1, 1, 1, 25>;
using CONF_SPI0_CS1_REG = offset_register<CONF_SPI0_CS1, 3, 1, 1, 1, 1, 25>;
using CONF_ECAP0_IN_PWM0_OUT_REG =
    offset_register<CONF_ECAP0_IN_PWM0_OUT, 3, 1, 1, 1, 1, 25>;
using CONF_UART0_CTSN_REG = offset_register<CONF_UART0_CTSN, 3, 1, 1, 1, 1, 25>;
using CONF_UART0_RTSN_REG = offset_register<CONF_UART0_RTSN, 3, 1, 1, 1, 1, 25>;
using CONF_UART0_RXD_REG = offset_register<CONF_UART0_RXD, 3, 1, 1, 1, 1, 25>;
using CONF_UART0_TXD_REG = offset_register<CONF_UART0_TXD, 3, 1, 1, 1, 1, 25>;
using CONF_UART1_CTSN_REG = offset_register<CONF_UART1_CTSN, 3, 1, 1, 1, 1, 25>;
using CONF_UART1_RTSN_REG = offset_register<CONF_UART1_RTSN, 3, 1, 1, 1, 1, 25>;
using CONF_UART1_RXD_REG = offset_register<CONF_UART1_RXD, 3, 1, 1, 1, 1, 25>;
using CONF_UART1_TXD_REG = offset_register<CONF_UART1_TXD, 3, 1, 1, 1, 1, 25>;
using CONF_I2C0_SDA_REG = offset_register<CONF_I2C0_SDA, 3, 1, 1, 1, 1, 25>;
using CONF_I2C0_SCL_REG = offset_register<CONF_I2C0_SCL, 3, 1, 1, 1, 1, 25>;
using CONF_MCASP0_ACLKX_REG =
    offset_register<CONF_MCASP0_ACLKX, 3, 1, 1, 1, 1, 25>;
using CONF_MCASP0_FSX_REG = offset_register<CONF_MCASP0_FSX, 3, 1, 1, 1, 1, 25>;
using CONF_MCASP0_AXR0_REG =
    offset_register<CONF_MCASP0_AXR0, 3, 1, 1, 1, 1, 25>;
using CONF_MCASP0_AHCLKR_REG =
    offset_register<CONF_MCASP0_AHCLKR, 3, 1, 1, 1, 1, 25>;
using CONF_MCASP0_ACLKR_REG =
    offset_register<CONF_MCASP0_ACLKR, 3, 1, 1, 1, 1, 25>;
using CONF_MCASP0_FSR_REG = offset_register<CONF_MCASP0_FSR, 3, 1, 1, 1, 1, 25>;
using CONF_MCASP0_AXR1_REG =
    offset_register<CONF_MCASP0_AXR1, 3, 1, 1, 1, 1, 25>;
using CONF_MCASP0_AHCLKX_REG =
    offset_register<CONF_MCASP0_AHCLKX, 3, 1, 1, 1, 1, 25>;
using CONF_XDMA_EVENT_INTR0_REG =
    offset_register<CONF_XDMA_EVENT_INTR0, 3, 1, 1, 1, 1, 25>;
using CONF_XDMA_EVENT_INTR1_REG =
    offset_register<CONF_XDMA_EVENT_INTR1, 3, 1, 1, 1, 1, 25>;
using CONF_WARMRSTN_REG = offset_register<CONF_WARMRSTN, 3, 1, 1, 1, 1, 25>;
using CONF_NNMI_REG = offset_register<CONF_NNMI, 3, 1, 1, 1, 1, 25>;
using CONF_TMS_REG = offset_register<CONF_TMS, 3, 1, 1, 1, 1, 25>;
using CONF_TDI_REG = offset_register<CONF_TDI, 3, 1, 1, 1, 1, 25>;
using CONF_TDO_REG = offset_register<CONF_TDO, 3, 1, 1, 1, 1, 25>;
using CONF_TCK_REG = offset_register<CONF_TCK, 3, 1, 1, 1, 1, 25>;
using CONF_TRSTN_REG = offset_register<CONF_TRSTN, 3, 1, 1, 1, 1, 25>;
using CONF_EMU0_REG = offset_register<CONF_EMU0, 3, 1, 1, 1, 1, 25>;
using CONF_EMU1_REG = offset_register<CONF_EMU1, 3, 1, 1, 1, 1, 25>;
using CONF_RTC_PWRONRSTN_REG =
    offset_register<CONF_RTC_PWRONRSTN, 3, 1, 1, 1, 1, 25>;
using CONF_PMIC_POWER_EN_REG =
    offset_register<CONF_PMIC_POWER_EN, 3, 1, 1, 1, 1, 25>;
using CONF_EXT_WAKEUP_REG = offset_register<CONF_EXT_WAKEUP, 3, 1, 1, 1, 1, 25>;
using CONF_USB0_DRVVBUS_REG =
    offset_register<CONF_USB0_DRVVBUS, 3, 1, 1, 1, 1, 25>;
using CONF_USB1_DRVVBUS_REG =
    offset_register<CONF_USB1_DRVVBUS, 3, 1, 1, 1, 1, 25>;
using CQDETECT_STATUS_REG = offset_register<CQDETECT_STATUS, 1>;
using DDR_IO_CTRL_REG = offset_register<DDR_IO_CTRL, 1>;
using VTP_CTRL_REG = offset_register<VTP_CTRL, 1>;
using VREF_CTRL_REG = offset_register<VREF_CTRL, 1>;
using TPCC_EVT_MUX_0_3_REG =
    offset_register<TPCC_EVT_MUX_0_3, 6, 2, 6, 2, 6, 2, 6, 2>;
using TPCC_EVT_MUX_4_7_REG =
    offset_register<TPCC_EVT_MUX_4_7, 6, 2, 6, 2, 6, 2, 6, 2>;
using TPCC_EVT_MUX_8_11_REG =
    offset_register<TPCC_EVT_MUX_8_11, 6, 2, 6, 2, 6, 2, 6, 2>;
using TPCC_EVT_MUX_12_15_REG =
    offset_register<TPCC_EVT_MUX_12_15, 6, 2, 6, 2, 6, 2, 6, 2>;
using TPCC_EVT_MUX_16_19_REG =
    offset_register<TPCC_EVT_MUX_16_19, 6, 2, 6, 2, 6, 2, 6, 2>;
using TPCC_EVT_MUX_20_23_REG =
    offset_register<TPCC_EVT_MUX_20_23, 6, 2, 6, 2, 6, 2, 6, 2>;
using TPCC_EVT_MUX_24_27_REG =
    offset_register<TPCC_EVT_MUX_24_27, 6, 2, 6, 2, 6, 2, 6, 2>;
using TPCC_EVT_MUX_28_31_REG =
    offset_register<TPCC_EVT_MUX_28_31, 6, 2, 6, 2, 6, 2, 6, 2>;
using TPCC_EVT_MUX_32_35_REG =
    offset_register<TPCC_EVT_MUX_32_35, 6, 2, 6, 2, 6, 2, 6, 2>;
using TPCC_EVT_MUX_36_39_REG =
    offset_register<TPCC_EVT_MUX_36_39, 6, 2, 6, 2, 6, 2, 6, 2>;
using TPCC_EVT_MUX_40_43_REG =
    offset_register<TPCC_EVT_MUX_40_43, 6, 2, 6, 2, 6, 2, 6, 2>;
using TPCC_EVT_MUX_44_47_REG =
    offset_register<TPCC_EVT_MUX_44_47, 6, 2, 6, 2, 6, 2, 6, 2>;
using TPCC_EVT_MUX_48_51_REG =
    offset_register<TPCC_EVT_MUX_48_51, 6, 2, 6, 2, 6, 2, 6, 2>;
using TPCC_EVT_MUX_52_55_REG =
    offset_register<TPCC_EVT_MUX_52_55, 6, 2, 6, 2, 6, 2, 6, 2>;
using TPCC_EVT_MUX_56_59_REG =
    offset_register<TPCC_EVT_MUX_56_59, 6, 2, 6, 2, 6, 2, 6, 2>;
using TPCC_EVT_MUX_60_63_REG =
    offset_register<TPCC_EVT_MUX_60_63, 6, 2, 6, 2, 6, 2, 6, 2>;
using TIMER_EVT_CAPT_REG = offset_register<TIMER_EVT_CAPT, 1>;
using ECAP_EVT_CAPT_REG = offset_register<ECAP_EVT_CAPT, 1>;
using ADC_EVT_CAPT_REG = offset_register<ADC_EVT_CAPT, 1>;
using RESET_ISO_REG = offset_register<RESET_ISO, 1>;
using DPLL_PWR_SW_CTRL_REG = offset_register<DPLL_PWR_SW_CTRL, 1>;
using DDR_CKE_CTRL_REG = offset_register<DDR_CKE_CTRL, 1>;
using SMA2_REG = offset_register<SMA2, 1>;
using M3_TXEV_EOI_REG = offset_register<M3_TXEV_EOI, 1>;
using IPC_MSG_REG0_REG = offset_register<IPC_MSG_REG0, 32>;
using IPC_MSG_REG1_REG = offset_register<IPC_MSG_REG1, 32>;
using IPC_MSG_REG2_REG = offset_register<IPC_MSG_REG2, 32>;
using IPC_MSG_REG3_REG = offset_register<IPC_MSG_REG3, 32>;
using IPC_MSG_REG4_REG = offset_register<IPC_MSG_REG4, 32>;
using IPC_MSG_REG5_REG = offset_register<IPC_MSG_REG5, 32>;
using IPC_MSG_REG6_REG = offset_register<IPC_MSG_REG6, 32>;
using IPC_MSG_REG7_REG = offset_register<IPC_MSG_REG7, 32>;
using DDR_CMD0_IOCTRL_REG = offset_register<DDR_CMD0_IOCTRL, 1>;
using DDR_CMD1_IOCTRL_REG = offset_register<DDR_CMD1_IOCTRL, 1>;
using DDR_CMD2_IOCTRL_REG = offset_register<DDR_CMD2_IOCTRL, 1>;
using DDR_DATA0_IOCTRL_REG = offset_register<DDR_DATA0_IOCTRL, 1>;
using DDR_DATA1_IOCTRL_REG = offset_register<DDR_DATA1_IOCTRL, 1>;
}
#endif